// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;  // Ensuring the contract is compatible with Solidity version up to v0.8.x & v0.9..v0.12 (includes also v0.7 and before) for more compatibility versions, you can use range like '^' or '' in solidity pragma
contract SimpleContract {  // Defining the contract name as "SimpleContract" with lower case naming convention to be compatible Solidity syntax rules that follow: must start by starting a line (using `pragma`), should not have lines after it. Including only one 'c' per word in camelcase is also allowed, but has no effect on the solidity compiler
    function add(uint256 _a, uint256 _b) public returns (uint256){  // Declaring a publicly accessible pure method `add` that takes two unsigned integer inputs and outputs another signed integers. The input types are declared as 'uint' which stands for unrestricted positive fixed-size integral with no upper limit on its value, similar to int but larger in size
        return _a + _b;  // It returns the sum of `_a` & '_b'. This is how you would add two integers together. The underscore (_) before a variable name means that it's intended for use as an identifier (i.e., not used elsewhere). In Solidity, variables start with '$', followed by letters to be consistent and easier to understand but ignored in the compiler
    }  // End of function declaration inside curly braces is done using solidity syntax rules: must have a closing brace `}` for every open one. This can also include comments (//) within code blocks, which are not strictly necessary as it's assumed that this block will only contain lines to be commented out until the next line with 'pragma directive'.
};  // End of contract definition inside curly braces is done using solidity syntax rules: must have a closing brace `}` for every open one. This can also include comments (//) within code blocks, which are not strictly necessary as it's assumed that this block will only contain lines to be commented out until the next line with 'pragma directive'.